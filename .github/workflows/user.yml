name: Push the Docker image to AWS ECR Repo

on:
  push:
    branches:
      - dev

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: inventory-repo
  TASK_DEFINITION: inventory-service
  ECS_SERVICE: inventory-service
  ECS_CLUSTER: FargateTestCluster
  CONTAINER_NAME: inventory-service

jobs:
  Build:
    name: Build
    env:
      github_token: ${{ secrets.TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ap-southeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get commit hash
        id: get-commit-hash
        run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"

      - name: Get timestamp
        id: get-timestamp
        run: echo "::set-output name=timestamp::$(date +'%Y-%m-%d-%H-%M')"

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: inventory-repo
          github_token: ${{ secrets.TOKEN }}
          IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --build-arg github_token=$github_token \
          -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Create .aws directory
        run: mkdir -p .aws

      - name: Describe ECS Task Definition
        id: describe-task-def
        run: |
          aws ecs describe-task-definition \
            --task-definition $TASK_DEFINITION \
            --region $AWS_REGION \
            --query "taskDefinition" \
            --output json > .aws/task-definition.json

      - name: Clean task definition JSON
        run: |
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' .aws/task-definition.json > .aws/clean-task-definition.json

      - name: Update task definition with new image using jq
        id: updating-image-tag
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: inventory-repo
          github_token: ${{ secrets.TOKEN }}
          IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
        run: |
          echo $IMAGE_TAG
          NEW_IMAGE="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          jq --arg image "$NEW_IMAGE" '.containerDefinitions[0].image = $image' .aws/clean-task-definition.json > .aws/updated-task-definition.json

      - name: Register new task definition
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://.aws/updated-task-definition.json \
            --region $AWS_REGION

      - name: Update ECS service with new task definition
        run: |
          TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION --query "taskDefinition.taskDefinitionArn" --output text --region $AWS_REGION)
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition $TASK_DEFINITION_ARN \
            --region $AWS_REGION



