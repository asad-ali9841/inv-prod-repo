const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const customizationFieldSchema = new Schema({
    required: {type: Boolean},
    included: {type: Boolean},
  }, {_id: false})

const productCustomizationSchema = new Schema({
    // basic product information
    productName: customizationFieldSchema,
    productDescription: customizationFieldSchema,
    productCategory: customizationFieldSchema,
    // units of measure
    unit_of_measure: customizationFieldSchema,
    // serial number and lot tracking
    serial_lot_tracking: customizationFieldSchema,
    // product images and docs
    productImages: customizationFieldSchema,
    productDocs: customizationFieldSchema,
    // supplier section
    supplierId: customizationFieldSchema,
    supplierName: customizationFieldSchema,
    supplierPartDescription: customizationFieldSchema,
    alternate_supplier: customizationFieldSchema,
    alternateSupplierId: customizationFieldSchema,
    alternateSupplierName: customizationFieldSchema,
    alternateSupplierPartDescription: customizationFieldSchema,
    preferredSupplier: customizationFieldSchema,
    // Additional information > Storage & Handling Information
    packagingType: customizationFieldSchema,
    storageRequirements: customizationFieldSchema,
    shelfSpaceRequirements: customizationFieldSchema,
    handlingInstructions: customizationFieldSchema,
    inspectionRequirements: customizationFieldSchema,
    // Additional information > Product guides & documents
    materialComposition: customizationFieldSchema,
    customizationOptions: customizationFieldSchema,
    associatedServices: customizationFieldSchema,
    safetyInfo: customizationFieldSchema,
    countryOfOrigin: customizationFieldSchema,
    // Additional information > Environment
    regulatoryCompliance: customizationFieldSchema,
    energyConsumption: customizationFieldSchema,
    carbonFootPrint: customizationFieldSchema,
    endOfLifeDisposal: customizationFieldSchema,
    // Additional information > Warranty & Support
    warrantyInformation: customizationFieldSchema,
    replacementPartsInfo: customizationFieldSchema,
    returnsPolicies: customizationFieldSchema,
    sellingConditions: customizationFieldSchema,
    // Product Variants
    variantSupplierPartNumber: customizationFieldSchema,
    variantAlternateSupplierPartNumber: customizationFieldSchema,
    // product identification
    variantId: {
      required: {type: Boolean},
      included: {type: Boolean},
      autoGenerated: {type: Boolean},
      prefix: {
        type: String,
        trim: true,
      }
    },
    productSKU: customizationFieldSchema,
    // color and size
    productColor: customizationFieldSchema,
    productSize: customizationFieldSchema,
    // weight and dimensions
    weight_and_dimensions: customizationFieldSchema,
    weightUnit: {
        type: String,
        trim: true,
      },
    lengthUnit: {
        type: String,
        trim: true,
      },
    // storage locations
    storageLocations: customizationFieldSchema,
    // pricing
    product_pricing: customizationFieldSchema,
    // stocks and reorder
    stocks_and_reorder: customizationFieldSchema,
    // counting method
    counting_method_section: customizationFieldSchema,
    createdAt: {
        type: Number,
        default: () => Date.now(),
    },
    updatedAt: {
        type: Number,
        default: () => Date.now(),
    },
    activity: {
        type: Array,
        default: [],
    },
  })
// Ensure that only one configuration exists
//ConfigurationSchema.index({ _id: 1 }, { unique: true });
productCustomizationSchema.pre("findOneAndUpdate", async function (next) {
    this.set({ updatedAt: Date.now() });
    next();
});
const Configuration = mongoose.model('Configuration', productCustomizationSchema);
module.exports = Configuration;